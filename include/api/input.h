#ifndef API_INPUT_H
#define API_INPUT_H

#include <stdint.h>

#ifdef __cplusplus
namespace api {
#endif

typedef struct {
    unsigned char character;
    uint32_t keycode;
    bool pressed;
    bool raw_character; // Indicates if the character had to be translated from a raw keycode
} KeyEvent;

// This comes from QEMU's 'qapi-types-ui.h' and was originally named 'QKeyCode'
typedef enum KeyCode {
    KEYCODE_UNMAPPED,
    KEYCODE_SHIFT,
    KEYCODE_SHIFT_R,
    KEYCODE_ALT,
    KEYCODE_ALT_R,
    KEYCODE_CTRL,
    KEYCODE_CTRL_R,
    KEYCODE_MENU,
    KEYCODE_ESC,
    KEYCODE_1,
    KEYCODE_2,
    KEYCODE_3,
    KEYCODE_4,
    KEYCODE_5,
    KEYCODE_6,
    KEYCODE_7,
    KEYCODE_8,
    KEYCODE_9,
    KEYCODE_0,
    KEYCODE_MINUS,
    KEYCODE_EQUAL,
    KEYCODE_BACKSPACE,
    KEYCODE_TAB,
    KEYCODE_Q,
    KEYCODE_W,
    KEYCODE_E,
    KEYCODE_R,
    KEYCODE_T,
    KEYCODE_Y,
    KEYCODE_U,
    KEYCODE_I,
    KEYCODE_O,
    KEYCODE_P,
    KEYCODE_BRACKET_LEFT,
    KEYCODE_BRACKET_RIGHT,
    KEYCODE_RET,
    KEYCODE_A,
    KEYCODE_S,
    KEYCODE_D,
    KEYCODE_F,
    KEYCODE_G,
    KEYCODE_H,
    KEYCODE_J,
    KEYCODE_K,
    KEYCODE_L,
    KEYCODE_SEMICOLON,
    KEYCODE_APOSTROPHE,
    KEYCODE_GRAVE_ACCENT,
    KEYCODE_BACKSLASH,
    KEYCODE_Z,
    KEYCODE_X,
    KEYCODE_C,
    KEYCODE_V,
    KEYCODE_B,
    KEYCODE_N,
    KEYCODE_M,
    KEYCODE_COMMA,
    KEYCODE_DOT,
    KEYCODE_SLASH,
    KEYCODE_ASTERISK,
    KEYCODE_SPC,
    KEYCODE_CAPS_LOCK,
    KEYCODE_F1,
    KEYCODE_F2,
    KEYCODE_F3,
    KEYCODE_F4,
    KEYCODE_F5,
    KEYCODE_F6,
    KEYCODE_F7,
    KEYCODE_F8,
    KEYCODE_F9,
    KEYCODE_F10,
    KEYCODE_NUM_LOCK,
    KEYCODE_SCROLL_LOCK,
    KEYCODE_KP_DIVIDE,
    KEYCODE_KP_MULTIPLY,
    KEYCODE_KP_SUBTRACT,
    KEYCODE_KP_ADD,
    KEYCODE_KP_ENTER,
    KEYCODE_KP_DECIMAL,
    KEYCODE_SYSRQ,
    KEYCODE_KP_0,
    KEYCODE_KP_1,
    KEYCODE_KP_2,
    KEYCODE_KP_3,
    KEYCODE_KP_4,
    KEYCODE_KP_5,
    KEYCODE_KP_6,
    KEYCODE_KP_7,
    KEYCODE_KP_8,
    KEYCODE_KP_9,
    KEYCODE_LESS,
    KEYCODE_F11,
    KEYCODE_F12,
    KEYCODE_PRINT,
    KEYCODE_HOME,
    KEYCODE_PGUP,
    KEYCODE_PGDN,
    KEYCODE_END,
    KEYCODE_LEFT,
    KEYCODE_UP,
    KEYCODE_DOWN,
    KEYCODE_RIGHT,
    KEYCODE_INSERT,
    KEYCODE_DELETE,
    KEYCODE_STOP,
    KEYCODE_AGAIN,
    KEYCODE_PROPS,
    KEYCODE_UNDO,
    KEYCODE_FRONT,
    KEYCODE_COPY,
    KEYCODE_OPEN,
    KEYCODE_PASTE,
    KEYCODE_FIND,
    KEYCODE_CUT,
    KEYCODE_LF,
    KEYCODE_HELP,
    KEYCODE_META_L,
    KEYCODE_META_R,
    KEYCODE_COMPOSE,
    KEYCODE_PAUSE,
    KEYCODE_RO,
    KEYCODE_HIRAGANA,
    KEYCODE_HENKAN,
    KEYCODE_YEN,
    KEYCODE_MUHENKAN,
    KEYCODE_KATAKANAHIRAGANA,
    KEYCODE_KP_COMMA,
    KEYCODE_KP_EQUALS,
    KEYCODE_POWER,
    KEYCODE_SLEEP,
    KEYCODE_WAKE,
    KEYCODE_AUDIONEXT,
    KEYCODE_AUDIOPREV,
    KEYCODE_AUDIOSTOP,
    KEYCODE_AUDIOPLAY,
    KEYCODE_AUDIOMUTE,
    KEYCODE_VOLUMEUP,
    KEYCODE_VOLUMEDOWN,
    KEYCODE_MEDIASELECT,
    KEYCODE_MAIL,
    KEYCODE_CALCULATOR,
    KEYCODE_COMPUTER,
    KEYCODE_AC_HOME,
    KEYCODE_AC_BACK,
    KEYCODE_AC_FORWARD,
    KEYCODE_AC_REFRESH,
    KEYCODE_AC_BOOKMARKS,
    KEYCODE_LANG1,
    KEYCODE_LANG2,
    KEYCODE_F13,
    KEYCODE_F14,
    KEYCODE_F15,
    KEYCODE_F16,
    KEYCODE_F17,
    KEYCODE_F18,
    KEYCODE_F19,
    KEYCODE_F20,
    KEYCODE_F21,
    KEYCODE_F22,
    KEYCODE_F23,
    KEYCODE_F24,
    KEYCODE__MAX,
} KeyCode;

typedef enum {
    MOUSE_BUTTON_LEFT = 1 << 0,
    MOUSE_BUTTON_MIDDLE = 1 << 1,
    MOUSE_BUTTON_RIGHT = 1 << 2,
    MOUSE_BUTTON_WHEEL_UP = 1 << 3,
    MOUSE_BUTTON_WHEEL_DOWN = 1 << 4
} MouseStateMask;

#ifdef __cplusplus
}
#endif

#endif